#
# Generated by @zondax/cli
#
-include Makefile.settings.mk

# Get all directories under cmd
CMDS=$(shell find cmd/* -type d)
BUILD_FLAGS ?=

GOCMD=go
GOTEST=$(GOCMD) test

# Shell colors
GREEN  := $(shell tput -Txterm setaf 2)
YELLOW := $(shell tput -Txterm setaf 3)
WHITE  := $(shell tput -Txterm setaf 7)
CYAN   := $(shell tput -Txterm setaf 6)
RESET  := $(shell tput -Txterm sgr0)

default: build

## Build

define build-targets
	@mkdir -p output
	@for dir in $(CMDS); do \
		bin_name=`basename $$dir`; \
		echo "$(GREEN)Building$(RESET) $${dir#cmd/}..."; \
		go build $(BUILD_FLAGS) $(1) -o output/$$bin_name ./$$dir; \
	done
	@[ -e main.go ] && go build $(BUILD_FLAGS) $(1) -o output/$(APP_NAME) || true
endef

.PHONY: build
build: generate ## Build
	$(call build-targets)

.PHONY: build-instrumented
build-instrumented: generate ## Build instrumented
	$(call build-targets, -race -tags debug)

.PHONY: generate
generate: mod-tidy ## go generate
	@echo "Generating automatic files (version, etc)...";
	@go generate ./internal/...

.PHONY: clean
clean: ## Go Clean
	go clean
	rm -rf output

.PHONY: lint
lint: ## Lint
	golangci-lint --version
	golangci-lint run

# Dependency helpers
.PHONY: install-lint
install-lint: ## Install go linter `golangci-lint`
	curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(shell go env GOPATH)/bin latest

## Go mod
.PHONY: mod-tidy
mod-tidy: ## Mod tidy
	@go mod tidy

.PHONY: mod-tidy-check
mod-tidy-check: ## Mod tidy check
	go mod tidy
	git diff --exit-code -- go.mod go.sum

.PHONY: mod-update
mod-update: ## Mod Update
	@go get -u ./...

## Run
.PHONY: run
run: build ## Run
	./output/$(APP_NAME) start

.PHONY: run-sidecar-postgres
run-sidecar-postgres: build ## Run
	./output/$(APP_NAME) start-sidecar-postgres

.PHONY: version
version: build ## Get Version
	./output/$(APP_NAME) version

## Test
.PHONY: test
test: ## Run tests. Options: $EXPORT_RESULT, $OUTPUT_OPTIONS
ifeq ($(EXPORT_RESULT), true)
	GO111MODULE=off go get -u github.com/jstemmer/go-junit-report
	$(eval OUTPUT_OPTIONS = | tee /dev/tty | go-junit-report -set-exit-code > junit-report.xml)
endif
	$(GOTEST) -v -race ./... $(OUTPUT_OPTIONS)

.PHONY: coverage
coverage: ## Run tests and export the coverage. Options: $EXPORT_RESULT
	$(GOTEST) -cover -covermode=count -coverprofile=profile.cov ./...
	$(GOCMD) tool cover -func profile.cov
ifeq ($(EXPORT_RESULT), true)
	GO111MODULE=off go get -u github.com/AlekSi/gocov-xml
	GO111MODULE=off go get -u github.com/axw/gocov/gocov
	gocov convert profile.cov | gocov-xml > coverage.xml
endif

## Container utils:
.PHONY: earthly
earthly: ## Build app with earthly
	@earthly config global.tls_enabled false
	@earthly +all

## Container utils:
.PHONY: earthly-debug
earthly-debug: ## Build app with earthly (debug)
	@earthly config global.tls_enabled false
	@earthly -i +all

.PHONY: docker-bash
docker-bash: ## Start container with bash shell, requires $APP_NAME
	docker run --platform linux/amd64 -it zondax/${APP_NAME}:latest /bin/sh

docker-run: ## Start container, requires $APP_NAME
	docker run --platform linux/amd64 -it zondax/${APP_NAME}:latest

########################################

## Utils:
.PHONY: zondax-update
zondax-update: ## Update template data using zondax cli
	@npx -y @zondax/cli@latest update

# Git utils
.PHONY: git-clean
git-clean: ## Git Clean
	git clean -xfd
	git submodule foreach --recursive git clean -xfd

# include if exists
-include Makefile.local.mk

## Help:
.PHONY: help
help: ## Show this help.
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} { \
		if (/^[a-zA-Z_-]+:.*?##.*$$/) {printf "    ${YELLOW}%-20s${GREEN}%s${RESET}\n", $$1, $$2} \
		else if (/^## .*$$/) {printf "  ${CYAN}%s${RESET}\n", substr($$1,4)} \
		}' $(MAKEFILE_LIST)
