// Package backend provides a client for the "client" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package backend

import (
    "github.com/aviate-labs/agent-go"
    
    "github.com/aviate-labs/agent-go/principal"
)

type CertifiedStatus = struct {
	Certificate         *[]uint8   `ic:"certificate,omitempty"`
	Data                string     `ic:"data"`
	PendingSecretReqs   []Secret   `ic:"pending_secret_reqs"`
	Secrets             []Secret   `ic:"secrets"`
	Consumers           []Consumer `ic:"consumers"`
	PendingConsumerReqs []Consumer `ic:"pending_consumer_reqs"`
}

type Consumer = struct {
	Id              string `ic:"id"`
	Creator         string `ic:"creator"`
	PendingType     uint8  `ic:"pending_type"`
	CreateTimestamp string `ic:"create_timestamp"`
	SecretKubeId    string `ic:"secret_kube_id"`
	UpdateTimestamp string `ic:"update_timestamp"`
	PermissionType  uint8  `ic:"permission_type"`
	KubeId          string `ic:"kube_id"`
}

type InitArgs = struct {
	Admin principal.Principal `ic:"admin"`
}

type Result = struct {
	Ok  *struct{} `ic:"Ok,variant"`
	Err *string   `ic:"Err,variant"`
}

type Secret = struct {
	Id              string `ic:"id"`
	Ttl             uint32 `ic:"ttl"`
	Creator         string `ic:"creator"`
	PendingType     uint8  `ic:"pending_type"`
	CreateTimestamp string `ic:"create_timestamp"`
	UpdateTimestamp string `ic:"update_timestamp"`
	KubeId          string `ic:"kube_id"`
}

type User = struct {
	Id              principal.Principal `ic:"id"`
	Creator         string              `ic:"creator"`
	CreateTimestamp string              `ic:"create_timestamp"`
	Root            bool                `ic:"root"`
	UpdateTimestamp string              `ic:"update_timestamp"`
}

// Agent is a client for the "client" canister.
type Agent struct {
    a          *agent.Agent
    canisterId principal.Principal
}

// NewAgent creates a new agent for the "client" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
    a, err := agent.New(config)
    if err != nil {
        return nil, err
    }
    return &Agent{
        a:          a,
        canisterId: canisterId,
    }, nil
}

// AddConsumer calls the "add_consumer" method on the "client" canister.
func (a Agent) AddConsumer(arg0 string, arg1 string, arg2 uint8) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "add_consumer",
        []any{arg0, arg1, arg2},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// AddPrivilegedUser calls the "add_privileged_user" method on the "client" canister.
func (a Agent) AddPrivilegedUser(arg0 principal.Principal) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "add_privileged_user",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// AddSecret calls the "add_secret" method on the "client" canister.
func (a Agent) AddSecret(arg0 string, arg1 uint32) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "add_secret",
        []any{arg0, arg1},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// AddUser calls the "add_user" method on the "client" canister.
func (a Agent) AddUser(arg0 principal.Principal) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "add_user",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// ApproveConsumer calls the "approve_consumer" method on the "client" canister.
func (a Agent) ApproveConsumer(arg0 string) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "approve_consumer",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// ApproveSecret calls the "approve_secret" method on the "client" canister.
func (a Agent) ApproveSecret(arg0 string) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "approve_secret",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// GetCertifiedStatus calls the "get_certified_status" method on the "client" canister.
func (a Agent) GetCertifiedStatus() (*CertifiedStatus, error) {
    var r0 CertifiedStatus
    if err := a.a.Query(
        a.canisterId,
        "get_certified_status",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// GetUsers calls the "get_users" method on the "client" canister.
func (a Agent) GetUsers() (*[]User, error) {
    var r0 []User
    if err := a.a.Query(
        a.canisterId,
        "get_users",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// RemovePrivilegedUser calls the "remove_privileged_user" method on the "client" canister.
func (a Agent) RemovePrivilegedUser(arg0 principal.Principal) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "remove_privileged_user",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// RemoveUser calls the "remove_user" method on the "client" canister.
func (a Agent) RemoveUser(arg0 principal.Principal) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "remove_user",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// RevokeConsumer calls the "revoke_consumer" method on the "client" canister.
func (a Agent) RevokeConsumer(arg0 string) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "revoke_consumer",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// RevokePendingConsumer calls the "revoke_pending_consumer" method on the "client" canister.
func (a Agent) RevokePendingConsumer(arg0 string) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "revoke_pending_consumer",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// RevokePendingSecret calls the "revoke_pending_secret" method on the "client" canister.
func (a Agent) RevokePendingSecret(arg0 string) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "revoke_pending_secret",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// RevokeSecret calls the "revoke_secret" method on the "client" canister.
func (a Agent) RevokeSecret(arg0 string) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "revoke_secret",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// UpdateConsumer calls the "update_consumer" method on the "client" canister.
func (a Agent) UpdateConsumer(arg0 string, arg1 string, arg2 uint8) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "update_consumer",
        []any{arg0, arg1, arg2},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// UpdateSecret calls the "update_secret" method on the "client" canister.
func (a Agent) UpdateSecret(arg0 string, arg1 uint32) (*Result, error) {
    var r0 Result
    if err := a.a.Call(
        a.canisterId,
        "update_secret",
        []any{arg0, arg1},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Whoami calls the "whoami" method on the "client" canister.
func (a Agent) Whoami() (*string, error) {
    var r0 string
    if err := a.a.Call(
        a.canisterId,
        "whoami",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}
